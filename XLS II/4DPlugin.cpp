/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : XLS II
 #	author : miyako
 #	12/06/13
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

std::map<uint32_t, BasicExcel*> _workbooks;

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- File

		case 1 :
			XLS_Create(pResult, pParams);
			break;

		case 2 :
			XLS_Load(pResult, pParams);
			break;

		case 3 :
			XLS_Save_as(pResult, pParams);
			break;

		case 4 :
			XLS_CLOSE(pResult, pParams);
			break;

// --- Workbook

		case 5 :
			XLS_Get_total_sheets(pResult, pParams);
			break;

		case 6 :
			XLS_Add_sheet(pResult, pParams);
			break;

		case 7 :
			XLS_Get_sheet_name(pResult, pParams);
			break;

		case 8 :
			XLS_Set_sheet_name(pResult, pParams);
			break;

// --- Worksheet

		case 9 :
			XLS_Get_total_rows(pResult, pParams);
			break;

		case 10 :
			XLS_Get_total_columns(pResult, pParams);
			break;

		case 11 :
			XLS_Set_column_width(pResult, pParams);
			break;

		case 12 :
			XLS_Get_column_width(pResult, pParams);
			break;

		case 13 :
			XLS_Merge_cells(pResult, pParams);
			break;

// --- Cell

		case 14 :
			XLS_Clear_value(pResult, pParams);
			break;

		case 15 :
			XLS_Get_text_value(pResult, pParams);
			break;

		case 16 :
			XLS_Get_real_value(pResult, pParams);
			break;

		case 17 :
			XLS_Get_long_value(pResult, pParams);
			break;

		case 18 :
			XLS_Set_long_value(pResult, pParams);
			break;

		case 19 :
			XLS_Set_real_value(pResult, pParams);
			break;

		case 20 :
			XLS_Set_text_value(pResult, pParams);
			break;

		case 21 :
			XLS_Get_value_type(pResult, pParams);
			break;

// --- Font

		case 22 :
			XLS_SET_FONT_PROPERTY(pResult, pParams);
			break;

		case 23 :
			XLS_GET_FONT_PROPERTY(pResult, pParams);
			break;

// --- Format

		case 24 :
			XLS_SET_FORMAT_PROPERTY(pResult, pParams);
			break;

		case 25 :
			XLS_GET_FORMAT_PROPERTY(pResult, pParams);
			break;
            
		case 26 :
			XLS_Get_format_string(pResult, pParams);
			break;
            
		case 27 :
			XLS_Set_format_string(pResult, pParams);
			break;

		case 28 :
			XLS_Get_wrapping(pResult, pParams);
			break;
			
		case 29 :
			XLS_SET_WRAPPING(pResult, pParams);
			break;		
	}
}

// ------------------------------------- File -------------------------------------


void XLS_Create(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT sheets;
	C_LONGINT returnValue;

	sheets.fromParamAtIndex(pParams, 1);

	unsigned int index;
	
	BasicExcel *wb = _workbookCreate(&index);
	
	unsigned int countSheets = sheets.getIntValue();
	
	//some reasonable bounds...
	
 	if(countSheets == 0) countSheets = 1;
	if(countSheets > 10) countSheets = 10;	
	
	wb->New(countSheets);
	
	returnValue.setIntValue(index);		
	returnValue.setReturn(pResult);
}

void XLS_Load(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT filePath;
	C_LONGINT returnValue;

	filePath.fromParamAtIndex(pParams, 1);

#if VERSIONMAC	
	string path;
#else
	wstring path;	
#endif
	
	unsigned int index;
	
	_copyPath(&filePath, &path);
	
	BasicExcel *wb = _workbookCreate(&index);
	
	if(wb->Load(path.c_str()))
		returnValue.setIntValue(index);	

	returnValue.setReturn(pResult);
}

void XLS_Save_as(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_TEXT filePath;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	filePath.fromParamAtIndex(pParams, 2);

#if VERSIONMAC	
	string path;
#else
	wstring path;	
#endif
	
	_copyPath(&filePath, &path);
	
	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	
	if(wb)
		returnValue.setIntValue(wb->SaveAs(path.c_str()));	

	returnValue.setReturn(pResult);
}

void XLS_CLOSE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;

	workbook.fromParamAtIndex(pParams, 1);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	
	if(wb){
		wb->Close();
		_workbookDelete(workbook.getIntValue());		
	}
}

// ----------------------------------- Workbook -----------------------------------


void XLS_Get_total_sheets(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	
	if(wb)
		returnValue.setIntValue(wb->GetTotalWorkSheets());

	returnValue.setReturn(pResult);
}

void XLS_Add_sheet(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_TEXT sheetName;
	C_LONGINT sheetPosition;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheetName.fromParamAtIndex(pParams, 2);
	sheetPosition.fromParamAtIndex(pParams, 3);

	wstring name;	
	
	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheetPosition.getIntValue();
	
	if(wb){
		_copyString(&sheetName, &name);
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			sheetCount = sheetCount -1;
		}
		else{
			sheetCount = -1;//add to last
		}
		
		wb->AddWorksheet(name.c_str(), sheetCount);
		returnValue.setIntValue(1);		
	}
	
	returnValue.setReturn(pResult);
}

void XLS_Get_sheet_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheetPosition;
	C_TEXT sheetName;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheetPosition.fromParamAtIndex(pParams, 2);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheetPosition.getIntValue();
	
	wstring name;
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			if(wb->GetSheetName(sheetCount-1, &name)){
				_copyString(&name, &sheetName);
				returnValue.setIntValue(1);		
			}else{
				string n;
				if(wb->GetSheetName(sheetCount-1, &n)){
					CUTF8String u;
					u = (const uint8_t *)n.c_str();
					sheetName.setUTF8String(&u);
					returnValue.setIntValue(1);					
				}
			}			
		}
	}	

	sheetName.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void XLS_Set_sheet_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheetPosition;
	C_TEXT sheetName;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheetPosition.fromParamAtIndex(pParams, 2);
	sheetName.fromParamAtIndex(pParams, 3);

	wstring name;	
	
	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheetPosition.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			_copyString(&sheetName, &name);
			returnValue.setIntValue(wb->RenameWorksheet(sheetCount-1, name.c_str()));			
		}
	}

	returnValue.setReturn(pResult);
}

// ----------------------------------- Worksheet ----------------------------------


void XLS_Get_total_rows(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();	
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				returnValue.setIntValue(ws->GetTotalRows());
			}			
		}
	}
	
	returnValue.setReturn(pResult);
}

void XLS_Get_total_columns(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();	
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				returnValue.setIntValue(ws->GetTotalCols());
			}			
		}
	}

	returnValue.setReturn(pResult);
}

void XLS_Set_column_width(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT column;
	C_LONGINT width;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	column.fromParamAtIndex(pParams, 3);
	width.fromParamAtIndex(pParams, 4);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();	
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){

				int c = column.getIntValue();	
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols())){
					ws->SetColWidth(c-1, width.getIntValue());
					returnValue.setIntValue(1);
				}								
			}			
		}
	}

	returnValue.setReturn(pResult);
}

void XLS_Get_column_width(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT column;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	column.fromParamAtIndex(pParams, 3);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();	
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int c = column.getIntValue();	
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols())){
					returnValue.setIntValue(ws->GetColWidth(c-1));
				}								
			}			
		}
	}

	returnValue.setReturn(pResult);
}

void XLS_Merge_cells(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_LONGINT height;
	C_LONGINT width;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
	height.fromParamAtIndex(pParams, 5);
	width.fromParamAtIndex(pParams, 6);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();	
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				int h = height.getIntValue();
				int w = width.getIntValue();	
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())
				   && (h > 1)
				   && ((h + r) <= ws->GetTotalRows())		   
				   && (w > 1)
				   && ((w + c) <= ws->GetTotalCols())){
					ws->MergeCells(r-1, c-1, h, w);	
					returnValue.setIntValue(1);
				}
			}
		}
	}

	returnValue.setReturn(pResult);
}

// ------------------------------------- Cell -------------------------------------


void XLS_Clear_value(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();	
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					returnValue.setIntValue(ws->EraseCell(r-1, c-1));			
				}
			}			
		}
	}

	returnValue.setReturn(pResult);
}

void XLS_Get_text_value(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_TEXT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){

					BasicExcelCell *cell = ws->Cell(r-1, c-1);
					if(cell){
					
						const char *a = cell->GetString();
						if(a){
							CUTF8String u = CUTF8String((const uint8_t *)a, cell->GetStringLength());
							returnValue.setUTF8String(&u);
						}else{
							const wchar_t *w = cell->GetWString();
							if(w){
								wstring u = wstring((const wchar_t *)w, cell->GetStringLength());	
								_copyString(&u, &returnValue);
							}
						}						
					}					
				}
			}			
		}
	}	

	returnValue.setReturn(pResult);
}

void XLS_Get_real_value(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_REAL returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					
					BasicExcelCell *cell = ws->Cell(r-1, c-1);
					if(cell){
						returnValue.setDoubleValue(cell->GetDouble());
					}					
				}
			}			
		}
	}	
	
	returnValue.setReturn(pResult);
}

void XLS_Get_long_value(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		
		BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
		if(ws){
			
			int r = row.getIntValue();
			int c = column.getIntValue();		
							
			BasicExcelCell *cell = ws->Cell(r-1, c-1);
			if(cell){
				returnValue.setIntValue(cell->GetInteger());
				returnValue.setIntValue(1);
			}					
		}			
	}		
	
	returnValue.setReturn(pResult);
}

void XLS_Set_long_value(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_LONGINT intValue;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
	intValue.fromParamAtIndex(pParams, 5);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		
		BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
		if(ws){
			
			int r = row.getIntValue();
			int c = column.getIntValue();		
				
			BasicExcelCell *cell = ws->Cell(r-1, c-1);
			if(cell){
				cell->SetInteger(intValue.getIntValue());
				returnValue.setIntValue(1);
			}					
		}			
	}

	returnValue.setReturn(pResult);
}

void XLS_Set_real_value(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_REAL realValue;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
	realValue.fromParamAtIndex(pParams, 5);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		
		BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
		if(ws){
			
			int r = row.getIntValue();
			int c = column.getIntValue();		
			
			BasicExcelCell *cell = ws->Cell(r-1, c-1);
			if(cell){
				cell->SetDouble(realValue.getDoubleValue());
				returnValue.setIntValue(1);
			}					
		}			
	}

	returnValue.setReturn(pResult);
}

void XLS_Set_text_value(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_TEXT stringValue;
	C_LONGINT returnValue;
	
	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
	stringValue.fromParamAtIndex(pParams, 5);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){

		BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
		if(ws){
			
			int r = row.getIntValue();
			int c = column.getIntValue();		
			
			BasicExcelCell *cell = ws->Cell(r-1, c-1);
			if(cell){
				wstring w;
				_copyString(&stringValue, &w);
				cell->SetWString(w.c_str());
				returnValue.setIntValue(1);
			}					
		}			
	}
	
	returnValue.setReturn(pResult);	
}

void XLS_Get_value_type(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_LONGINT returnValue;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					
					BasicExcelCell *cell = ws->Cell(r-1, c-1);
					if(cell){
						returnValue.setIntValue(cell->Type());
					}					
				}
			}			
		}
	}

	returnValue.setReturn(pResult);
}

// ------------------------------------- Font -------------------------------------


void XLS_SET_FONT_PROPERTY(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_TEXT name;
	C_LONGINT height;
	C_LONGINT color;
	C_LONGINT weight;
	C_LONGINT option;
	C_LONGINT underline;
	C_LONGINT family;
	C_LONGINT escapement;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
	name.fromParamAtIndex(pParams, 5);
	height.fromParamAtIndex(pParams, 6);
	color.fromParamAtIndex(pParams, 7);
	weight.fromParamAtIndex(pParams, 8);
	option.fromParamAtIndex(pParams, 9);
	underline.fromParamAtIndex(pParams, 10);
	family.fromParamAtIndex(pParams, 11);
	escapement.fromParamAtIndex(pParams, 12);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					
					BasicExcelCell *cell = ws->Cell(r-1, c-1);
					
					if(cell){

						XLSFormatManager mgr(*wb);
						ExcelFont font;
						
						wstring u;
						_copyString(&name, &u);
						font.set_font_name(u.c_str());  
						font.set_color_index(color.getIntValue());
						font.set_weight(weight.getIntValue());
						font.set_underline_type(underline.getIntValue());	
						font._options = option.getIntValue();
						font._font_family = family.getIntValue();
						font.set_escapement(escapement.getIntValue());	
						font.set_height(height.getIntValue());
						
						CellFormat fmt(mgr);
						fmt.set_font(font);
						cell->SetFormat(fmt);

					}					
				}
			}			
		}
	}
}

void XLS_GET_FONT_PROPERTY(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_TEXT name;
	C_LONGINT height;
	C_LONGINT color;
	C_LONGINT weight;
	C_LONGINT option;
	C_LONGINT underline;
	C_LONGINT family;
	C_LONGINT escapement;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();

	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					
					BasicExcelCell *cell = ws->Cell(r-1, c-1);

					if(cell){
						
						XLSFormatManager mgr(*wb);
						CellFormat fmt(mgr, cell);
						ExcelFont fnt = fmt.get_font();

						wstring u = fnt._name;
						_copyString(&u, &name);

						height.setIntValue(fnt._height);
						color.setIntValue(fnt._color_index);
						weight.setIntValue(fnt._weight);						
						option.setIntValue(fnt._options);
						underline.setIntValue(fnt._underline_type);							
						family.setIntValue(fnt._font_family);
						escapement.setIntValue(fnt._escapement_type);							
					}					
				}
			}			
		}
	}
	
	name.toParamAtIndex(pParams, 5);
	height.toParamAtIndex(pParams, 6);
	color.toParamAtIndex(pParams, 7);
	weight.toParamAtIndex(pParams, 8);
	option.toParamAtIndex(pParams, 9);	
	underline.toParamAtIndex(pParams, 10);
	family.toParamAtIndex(pParams, 11);
	escapement.toParamAtIndex(pParams, 12);	
}

// ------------------------------------ Format ------------------------------------


void XLS_SET_FORMAT_PROPERTY(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_LONGINT alignment;
	C_LONGINT rotation;
	C_LONGINT textProps;
	C_LONGINT borderlineTop;
	C_LONGINT borderlineTopColor;
	C_LONGINT borderlineLeft;
	C_LONGINT borderlineLeftColor;
	C_LONGINT borderlineRight;
	C_LONGINT borderlineRightColor;
	C_LONGINT borderlineBottom;
	C_LONGINT borderlineBottomColor;
	C_LONGINT pattern;
	C_LONGINT patternColor;
	C_LONGINT patternBackColor;

	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
	alignment.fromParamAtIndex(pParams, 5);
	rotation.fromParamAtIndex(pParams, 6);
	textProps.fromParamAtIndex(pParams, 7);
	borderlineTop.fromParamAtIndex(pParams, 8);
	borderlineTopColor.fromParamAtIndex(pParams, 9);
	borderlineLeft.fromParamAtIndex(pParams, 10);
	borderlineLeftColor.fromParamAtIndex(pParams, 11);
	borderlineRight.fromParamAtIndex(pParams, 12);
	borderlineRightColor.fromParamAtIndex(pParams, 13);
	borderlineBottom.fromParamAtIndex(pParams, 14);
	borderlineBottomColor.fromParamAtIndex(pParams, 15);
	pattern.fromParamAtIndex(pParams, 16);
	patternColor.fromParamAtIndex(pParams, 17);
	patternBackColor.fromParamAtIndex(pParams, 18);

	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					
					BasicExcelCell *cell = ws->Cell(r-1, c-1);
					
					if(cell){
						
						XLSFormatManager mgr(*wb);
						CellFormat fmt(mgr);
						
						fmt.set_alignment(alignment.getIntValue());
						fmt.set_rotation(rotation.getIntValue());
						fmt.set_text_props(textProps.getIntValue());
						
						fmt.set_borderlines(
											(EXCEL_LS)borderlineLeft.getIntValue(),
											(EXCEL_LS)borderlineRight.getIntValue(),
											(EXCEL_LS)borderlineTop.getIntValue(),
											(EXCEL_LS)borderlineBottom.getIntValue(),
											borderlineLeftColor.getIntValue(),
											borderlineRightColor.getIntValue(),
											borderlineTopColor.getIntValue(),
											borderlineBottomColor.getIntValue(),
											EXCEL_LS_NO_LINE,
											(COLOR1_PAT)pattern.getIntValue());			
						
						fmt.set_color2(MAKE_COLOR2(patternColor.getIntValue(), patternBackColor.getIntValue()));
						
						cell->SetFormat(fmt);
						
					}					
				}
			}			
		}
	}
}

void XLS_GET_FORMAT_PROPERTY(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_LONGINT alignment;
	C_LONGINT rotation;
	C_LONGINT textProps;
	C_LONGINT borderlineTop;
	C_LONGINT borderlineTopColor;
	C_LONGINT borderlineLeft;
	C_LONGINT borderlineLeftColor;
	C_LONGINT borderlineRight;
	C_LONGINT borderlineRightColor;
	C_LONGINT borderlineBottom;
	C_LONGINT borderlineBottomColor;
	C_LONGINT pattern;
	C_LONGINT patternColor;
	C_LONGINT patternBackColor;
	
	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
	
	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					
					BasicExcelCell *cell = ws->Cell(r-1, c-1);
					if(cell){
						
						XLSFormatManager mgr(*wb);
						CellFormat fmt(mgr, cell);
						
						alignment.setIntValue((int)fmt.get_alignment());
						rotation.setIntValue((int)fmt.get_rotation());
						textProps.setIntValue((int)fmt.get_text_props());
						
						borderlineTop.setIntValue(((((int)fmt.get_borderlines() & 0x00000F00)>>8)));
						borderlineLeft.setIntValue(((((int)fmt.get_borderlines()) & 0x0000000F)));	
						borderlineRight.setIntValue(((((int)fmt.get_borderlines()) & 0x000000F0)>>4));
						borderlineBottom.setIntValue(((((int)fmt.get_borderlines() & 0x0000F000))>>12));	
						borderlineLeftColor.setIntValue(((((int)fmt.get_borderlines() & 0x007F0000))>>16));
						borderlineRightColor.setIntValue(((((int)fmt.get_borderlines() & 0x3F800000))>>23));
						
						borderlineTopColor.setIntValue(((((int)fmt.get_color1() & 0x0000007F))));
						borderlineBottomColor.setIntValue(((((int)fmt.get_color1() & 0x00003F80))>>7));
						
						pattern.setIntValue(((((int)fmt.get_color1() & 0xFC000000))));
						
						patternColor.setIntValue(((((int)fmt.get_color2() & 0x007F))));
						patternBackColor.setIntValue(((((int)fmt.get_color2() & 0x3F80))>>7));	

					}					
				}
			}			
		}
	}
	
	alignment.toParamAtIndex(pParams, 5);
	rotation.toParamAtIndex(pParams, 6);
	textProps.toParamAtIndex(pParams, 7);
	borderlineTop.toParamAtIndex(pParams, 8);
	borderlineTopColor.toParamAtIndex(pParams, 9);
	borderlineLeft.toParamAtIndex(pParams, 10);
	borderlineLeftColor.toParamAtIndex(pParams, 11);
	borderlineRight.toParamAtIndex(pParams, 12);
	borderlineRightColor.toParamAtIndex(pParams, 13);
	borderlineBottom.toParamAtIndex(pParams, 14);
	borderlineBottomColor.toParamAtIndex(pParams, 15);
	pattern.toParamAtIndex(pParams, 16);
	patternColor.toParamAtIndex(pParams, 17);
	patternBackColor.toParamAtIndex(pParams, 18);	
}

void XLS_Get_format_string(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_TEXT formatString;
	C_LONGINT returnValue;
    
	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
    
	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					
					BasicExcelCell *cell = ws->Cell(r-1, c-1);
					if(cell){
						
						XLSFormatManager mgr(*wb);
						CellFormat fmt(mgr, cell);
						
						wstring f = mgr.get_format_string(fmt);
						_copyString(&f, &formatString);
						returnValue.setIntValue(1);
					}
				}
			}
		}
	}
    
	formatString.toParamAtIndex(pParams, 5);
	returnValue.setReturn(pResult);
}

void XLS_Set_format_string(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_TEXT formatString;
	C_LONGINT returnValue;
    
	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
	formatString.fromParamAtIndex(pParams, 5);
	
	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					
					BasicExcelCell *cell = ws->Cell(r-1, c-1);
					if(cell){
						
						XLSFormatManager mgr(*wb);
						CellFormat fmt(mgr, cell);
						
						wstring f;
						_copyString(&formatString, &f);
						fmt.set_format_string(f);
						cell->SetFormat(fmt);
						returnValue.setIntValue(1);						
					}
				}
			}
		}
	}
    
	returnValue.setReturn(pResult);
}


BasicExcel *_workbookCreate(unsigned int *index){
	
	BasicExcel *w = new BasicExcel;
	
	unsigned int i = 1;
	
	while (_workbooks.find(i) != _workbooks.end()) {
		i++;
	}
	
	_workbooks.insert(std::map<uint32_t, BasicExcel*>::value_type(i, w));
	
	*index = i; 
	
	return w;
}

void _workbookDelete(unsigned int i){
	
	BasicExcel *w = NULL;
	
	std::map<uint32_t, BasicExcel*>::iterator pos = _workbooks.find(i);
	
	if(pos != _workbooks.end()) {
		w = pos->second;
		delete w;
		_workbooks.erase(pos);
	}
	
}

BasicExcel *_workbookGet(unsigned int i){
	
	BasicExcel *w = NULL;
	
	std::map<uint32_t, BasicExcel*>::iterator pos = _workbooks.find(i);
	
	if(pos != _workbooks.end()) {
		w = pos->second;
	}
	
	return w;
}

void _copyString(C_TEXT *t, std::wstring *p){
#if VERSIONMAC	
	CUTF8String s;
	t->copyUTF8String(&s);
	
	iconv_t conv_desc = iconv_open(UTF32NATIVE, "UTF-8");
	
	if ((size_t)conv_desc != (size_t) -1){
		
		const char *inData = (const char *)s.c_str();		
		size_t inDataLen = (size_t)s.length();
		size_t outDataLen = (size_t)(t->getUTF16Length() * 4) + 4;		
		
		char *outData = (char *)calloc(outDataLen, 1);
		char *outDataPtr = outData;		
		
		size_t iconv_value;
		
		iconv_value = iconv (conv_desc, &inData, &inDataLen, &outData, &outDataLen);
		
		if (!iconv_value){
			*p = std::wstring((const wchar_t *)outDataPtr, wcslen((const wchar_t *)outDataPtr));				
		}
		
		free(outDataPtr);	
		iconv_close (conv_desc);		
	}	
#else	
	*p = std::wstring((wchar_t *)t->getUTF16StringPtr());
#endif	
}	

void _copyString(std::wstring *p, C_TEXT *t){
#if VERSIONMAC	
	iconv_t conv_desc = iconv_open("UTF-8", UTF32NATIVE);	
	
	if ((size_t)conv_desc != (size_t) -1){
		
		const char *inData = (const char *)p->c_str();		
		size_t inDataLen = (size_t)p->length() * sizeof(wchar_t);
		size_t outDataLen = (size_t)(p->length() * 4) + 1;			
		
		char *outData = (char *)calloc(outDataLen, 1);
		char *outDataPtr = outData;			
		
		size_t iconv_value;
		
		iconv_value = iconv (conv_desc, &inData, &inDataLen, &outData, &outDataLen);
		
		if (!iconv_value){
			t->setUTF8String((const uint8_t *)outDataPtr, strlen(outDataPtr));		
		}		
		
		free(outDataPtr);	
		iconv_close (conv_desc);	
	}	
#else
	t->setUTF16String((const PA_Unichar*)p->c_str(), (uint32_t)p->length());
#endif	
}

#if VERSIONMAC
void _copyPath(C_TEXT *t, std::string *p){
	
	NSString *str = t->copyUTF16String();
	NSURL *u = (NSURL *)CFURLCreateWithFileSystemPath(kCFAllocatorDefault, (CFStringRef)str, kCFURLHFSPathStyle, false);
	
	if(u){
		NSString *path = (NSString *)CFURLCopyFileSystemPath((CFURLRef)u, kCFURLPOSIXPathStyle);
		CFIndex size = CFStringGetMaximumSizeOfFileSystemRepresentation((CFStringRef)path);
		std::vector<uint8_t> buf(size);		
		[path getFileSystemRepresentation:(char *)&buf[0] maxLength:size];
		*p = std::string((char *)&buf[0]);
		[path release];
		[u release];
	}	
	[str release];
}
#else
void _copyPath(C_TEXT *t, std::wstring *p){
	
	*p = std::wstring((wchar_t *)t->getUTF16StringPtr());		
	
}
#endif

void XLS_Get_wrapping(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_LONGINT returnValue;
	
	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
	
	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					
					BasicExcelCell *cell = ws->Cell(r-1, c-1);
					
					if(cell){
						
						XLSFormatManager mgr(*wb);
						CellFormat fmt(mgr, cell);
						
						returnValue.setIntValue((int)fmt.is_wrapping());
						
					}
					
				}
				
			}
			
		}
		
	}
						
	returnValue.setReturn(pResult);
}

void XLS_SET_WRAPPING(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT workbook;
	C_LONGINT sheet;
	C_LONGINT row;
	C_LONGINT column;
	C_LONGINT wrapping;
	
	workbook.fromParamAtIndex(pParams, 1);
	sheet.fromParamAtIndex(pParams, 2);
	row.fromParamAtIndex(pParams, 3);
	column.fromParamAtIndex(pParams, 4);
	wrapping.fromParamAtIndex(pParams, 5);
	
	BasicExcel *wb = _workbookGet(workbook.getIntValue());
	int sheetCount = sheet.getIntValue();
	
	if(wb){
		if((sheetCount > 0) && (sheetCount <= wb->GetTotalWorkSheets())){
			BasicExcelWorksheet *ws = wb->GetWorksheet(sheetCount-1);
			if(ws){
				
				int r = row.getIntValue();
				int c = column.getIntValue();		
				
				if(   (c > 0) 
				   && (c <= ws->GetTotalCols()) 
				   && (r > 0)
				   && (r <= ws->GetTotalRows())){
					
					BasicExcelCell *cell = ws->Cell(r-1, c-1);
					
					if(cell){
						
						XLSFormatManager mgr(*wb);
						CellFormat fmt(mgr);
						
						fmt.set_wrapping((bool)wrapping.getIntValue());
						
						cell->SetFormat(fmt);
					}
					
				}
				
			}
			
		}
		
	}
	
}